/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;
import back.Battle;
import back.Schedule;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.GregorianCalendar;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.Locale;
import javax.swing.JOptionPane;
/**
 *
 * @author Isabelle
 */
public class CalendarFrame extends javax.swing.JFrame {

    private static GregorianCalendar MONTH = new GregorianCalendar();
    
    public CalendarFrame() {
        initComponents();
        MONTH = new GregorianCalendar(MONTH.get(Calendar.YEAR), 
                                      MONTH.get(Calendar.MONTH), 
                                      1);
        CalendarFrame.populateCalendar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        calendar = new javax.swing.JTable();
        monthYearLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        forewardButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        monthlyList = new javax.swing.JList();
        battlesForMonthLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FIGHT CLUB");

        calendar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "SUN", "MON", "TUES", "WED", "THURS", "FRI", "SAT"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        calendar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                calendarMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(calendar);

        monthYearLabel.setFont(monthYearLabel.getFont().deriveFont(monthYearLabel.getFont().getSize()+7f));
        monthYearLabel.setText("h");
        monthYearLabel.setToolTipText("");
        monthYearLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        backButton.setText("<-");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        forewardButton.setText("->");
        forewardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forewardButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(monthlyList);

        battlesForMonthLabel.setText("battles this month:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(monthYearLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(backButton)
                            .addGap(270, 270, 270)
                            .addComponent(forewardButton))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(battlesForMonthLabel)
                        .addGap(0, 137, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(monthYearLabel)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(battlesForMonthLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(forewardButton)
                                .addComponent(backButton))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void calendarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_calendarMouseClicked
        int row = calendar.getSelectedRow();
        int col = calendar.getSelectedColumn();
        Object val = calendar.getValueAt(row, col);
        if(row >=0 && col >=0 && val != null) 
        {
            int day = new Integer(val.toString());
            GregorianCalendar send = new GregorianCalendar(MONTH.get(Calendar.YEAR), 
                                                           MONTH.get(Calendar.MONTH), 
                                                           day);
            ScheduleFrame go = new ScheduleFrame();
            ScheduleFrame.setBattleList(send);
            go.setVisible(true);
        }
    }//GEN-LAST:event_calendarMouseClicked

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        MONTH = new GregorianCalendar(MONTH.get(Calendar.YEAR), 
                                                       MONTH.get(Calendar.MONTH)-1, 
                                                       1);
        CalendarFrame.populateCalendar();
    }//GEN-LAST:event_backButtonActionPerformed

    private void forewardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forewardButtonActionPerformed
        MONTH.add(Calendar.MONTH, 1);
        CalendarFrame.populateCalendar();
    }//GEN-LAST:event_forewardButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalendarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalendarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalendarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalendarFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalendarFrame().setVisible(true);
            }
        });
    }
    
    public static void populateCalendar()
    {
        CalendarFrame.setMonthList();
        MONTH.setFirstDayOfWeek(Calendar.SUNDAY);
        //SET MONTH/YEAR TITLE 
        String display = MONTH.getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.getDefault());
        display += " " +MONTH.get(Calendar.YEAR);
        monthYearLabel.setText(display);
        CalendarFrame.clearCalendar();
        //SET DAYS
        int weekLength = 7; 
        int maxWeeks = 6;
        int startDay = MONTH.get(Calendar.DAY_OF_WEEK)-1;
        int endDay = MONTH.getActualMaximum(Calendar.DAY_OF_MONTH);
        int day = 1;
        //first week
        for(int i = startDay; i < weekLength; i++)
        {
            calendar.setValueAt(day, 0, i);
            day++;
        }
        //rest of month
        for(int week = 1; week < maxWeeks; week++)
        {
            for(int days = 0; days < weekLength; days++)
            {
                if(day <= endDay)
                    calendar.setValueAt(day, week, days);
                day++;
            }
        }
        
    }
    
    public static void clearCalendar()
    {
        int cols =calendar.getColumnCount();
        int rows = calendar.getRowCount();
        for(int r = 0; r < rows; r++)
        {
            for(int c = 0; c < cols; c++)
            {
                calendar.setValueAt(null, r, c);
            }
        }
    }
    
    public static void setMonthList( )
    {
        SimpleDateFormat fmt = new SimpleDateFormat("MMM-yyyy");
        String monthYearKey = fmt.format(MONTH.getTime());
        
        Schedule sched = new Schedule();
        LinkedList<Battle> month = new LinkedList();
        if(sched.loadScheduleFromStorageFile())
        {
            Object[] fightsToday = new Object[month.size()];
            try
            {
                month = sched.getBattlesFromMonth (monthYearKey);
                battlesForMonthLabel.setText("Battles this month:");
                fightsToday = new Battle[month.size()];
                fightsToday = month.toArray();
                monthlyList.setListData(fightsToday);
            }
            catch(NullPointerException e)
            {
                Arrays.fill( fightsToday, null );
                monthlyList.setListData(fightsToday);
                battlesForMonthLabel.setText("No battles this month.");
            }
        }
    }
    
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private static javax.swing.JLabel battlesForMonthLabel;
    private static javax.swing.JTable calendar;
    private javax.swing.JButton forewardButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private static javax.swing.JLabel monthYearLabel;
    private static javax.swing.JList monthlyList;
    // End of variables declaration//GEN-END:variables
}
